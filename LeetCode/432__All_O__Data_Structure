class FrequencyNode :
    def __init__(self, key: str, count: int):
        self.count = count
        self.keys = set()
        self.prev = None
        self.next = None

class AllOne:

    def __init__(self):
        
        self.key_to_frequency = {}         # Maps key → frequency
        self.frequency_to_node = {}        # Maps frequency → FrequencyNode
        
        self.head = FrequencyNode(float('-inf'))  # Dummy head for min lookup
        self.tail = FrequencyNode(float('inf'))   # Dummy tail for max lookup

        self.head.next = self.tail
        self.tail.prev = self.head
        

    def inc(self, key: str) -> None:
        

    def dec(self, key: str) -> None:
        

    def getMaxKey(self) -> str:
        

    def getMinKey(self) -> str:

        

def main():
    tracker = AllOne()

    # Initial increments
    tracker.increment("a")  # a: 1
    tracker.increment("b")  # b: 1
    tracker.increment("c")  # c: 1

    tracker.increment("a")  # a: 2
    tracker.increment("a")  # a: 3
    tracker.increment("b")  # b: 2

    # Validate max and min
    assert tracker.get_max_key() == "a", "Expected max key to be 'a'"
    assert tracker.get_min_key() == "c", "Expected min key to be 'c'"

    # Decrement 'a' from 3 → 2
    tracker.decrement("a")
    assert tracker.get_max_key() in {"a", "b"}, "Expected max key to be 'a' or 'b'"
    assert tracker.get_min_key() == "c", "Expected min key to still be 'c'"

    # Remove 'c' completely
    tracker.decrement("c")
    assert tracker.get_min_key() in {"a", "b"}, "Expected min key to be 'a' or 'b' after removing 'c'"

    # Decrement both 'a' and 'b' to 1
    tracker.decrement("a")
    tracker.decrement("b")
    assert tracker.get_max_key() in {"a", "b"}, "Expected max key to be 'a' or 'b' at count 1"
    assert tracker.get_min_key() in {"a", "b"}, "Expected min key to be 'a' or 'b' at count 1"

    print("✅ All assertions passed!")

if __name__ == "__main__":
    main()